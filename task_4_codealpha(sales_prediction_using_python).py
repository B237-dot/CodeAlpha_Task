# -*- coding: utf-8 -*-
"""TASK 4 Codealpha(sales prediction using python).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OsdwzU9ymPYhbfvVvU4HtQIW1B1OEYYe
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("bumba5341/advertisingcsv")

print("Path to dataset files:", path)

# Import Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import warnings
warnings.filterwarnings('ignore')

import kagglehub
import pandas as pd
import os # Import the os module to list directory contents

# Download latest version
path = kagglehub.dataset_download("bumba5341/advertisingcsv")

print("Path to dataset files:", path)

# List the contents of the downloaded directory to verify the file name
print("\nContents of the downloaded directory:")
for root, dirs, files in os.walk(path):
    for name in files:
        print(os.path.join(root, name))
    for name in dirs:
        print(os.path.join(root, name))


# Construct the full path to the CSV file using the downloaded path
# Assuming the file is named advertising.csv and is directly in the downloaded folder
csv_file_path = f"{path}/Advertising.csv" # Note: Used 'Advertising.csv' based on original code attempt. Verify filename from the list above.

# Read the CSV file into a pandas DataFrame
df = pd.read_csv(csv_file_path)

print("\nDataFrame loaded successfully:")
print(df.head())

df.sample(5)

df.info()

df.columns

df.describe()

df.isnull().sum()

df[df.duplicated()]

plt.figure(figsize=(8,6))
sns.regplot(x='TV',y='Sales',data=df)

plt.figure(figsize=(8,6))
sns.regplot(x='Newspaper',y='Sales',data=df)

plt.figure(figsize=(8,6))
sns.regplot(x='Radio',y='Sales',data=df)

sns.pairplot(df)

sns.pairplot(data = df , hue = 'Sales')
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor

x=df[ ['Unnamed: 0','TV', 'Radio', 'Newspaper']]
y=df[[ 'Sales' ]]

from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import PolynomialFeatures
from sklearn.preprocessing import OrdinalEncoder
scaler = StandardScaler()
x= scaler.fit_transform(x)

x_train , x_test , y_train , y_test = train_test_split(x,y,test_size=.2,shuffle=True)

model = LinearRegression()

model.fit(x_train,y_train)

y_pred = model.predict(x_test)

from sklearn.metrics import r2_score
print(f''' The train accuracy : {r2_score(y_train,model.predict(x_train))}
The test accuracy : {r2_score(y_test , y_pred)}''')

random_forest = RandomForestRegressor(n_estimators=100)
random_forest.fit(x_train,y_train)

random_f_pred = random_forest.predict(x_test)

r2_score(y_test,random_f_pred)

#Sales Prediction using Python
# ● Predict future sales based on factors like advertising spend, target segment and platform.
# ● Prepare data through cleaning, transformation and feature selection.
# ● Use regression or time series models to forecast sales.
# ● Analyze how changes in advertising impact sales outcomes.
# ● Deliver actionable insights for business marketing strategies.

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Feature Selection and Preparation
# We can use 'TV', 'Radio', and 'Newspaper' as features to predict 'Sales'.
features = ['TV', 'Radio', 'Newspaper']
target = 'Sales'

X = df[features]
y = df[target]

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"Root Mean Squared Error: {rmse:.2f}")
print(f"R-squared: {r2:.2f}")

# Analyze the coefficients to understand feature impact
print("\nModel Coefficients:")
for feature, coef in zip(features, model.coef_):
  print(f"{feature}: {coef:.2f}")

# Visualize actual vs. predicted sales
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel("Actual Sales")
plt.ylabel("Predicted Sales")
plt.title("Actual vs. Predicted Sales")
plt.grid(True)
plt.show()

# Example of making a prediction for new advertising spend
new_ad_spend = pd.DataFrame({'TV': [250], 'Radio': [30], 'Newspaper': [25]})
predicted_sales = model.predict(new_ad_spend)
print(f"\nPredicted Sales for new ad spend: {predicted_sales[0]:.2f}")