# -*- coding: utf-8 -*-
"""Iris flower classification (task1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OZE3bACpahVwDBAogsQcPsT6wPC5_dZB
"""

#task-1:Iris Flower Classification
#‚óè Use measurements of Iris flowers (setosa, versicolor, virginica) as input data.
#‚óè Train a machine learning model to classify the species based on these measurements.
#‚óè Use libraries like Scikit-learn for easy dataset access and model building.
#‚óè Evaluate the model‚Äôs accuracy and performance using test data.
#‚óè Understand basic classification concepts in machine learning

import kagglehub

# Download latest version
path = kagglehub.dataset_download("saurabh00007/iriscsv")

print("Path to dataset files:", path)

# Step 1: Import necessary libraries
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Step 2: Load the Iris dataset
iris = load_iris()
X = iris.data            # Features: sepal/petal length & width
y = iris.target          # Target: species (0=setosa, 1=versicolor, 2=virginica)

# Step 3: Split dataset into training and test sets (80/20 split)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Feature Scaling (optional for tree-based models, but good practice)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 5: Choose and train a classification model (e.g., Random Forest)
model = RandomForestClassifier(random_state=42)
model.fit(X_train_scaled, y_train)

# Step 6: Make predictions
y_pred = model.predict(X_test_scaled)

# Step 7: Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("‚úÖ Model Accuracy:", round(accuracy * 100, 2), "%\n")

print("üìä Classification Report:")
print(classification_report(y_test, y_pred, target_names=iris.target_names))

print("üß© Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

"""It performs the following:
1.  **Loads the Iris dataset** using `sklearn.datasets.load_iris`.
2.  **Splits the data** into training and testing sets using `train_test_split`.
3.  **Scales the features** using `StandardScaler` (though for Random Forest, this step is often less critical than for distance-based algorithms).
4.  **Initializes and trains** a `RandomForestClassifier` on the training data.
5.  **Makes predictions** on the test data.
6.  **Evaluates the model** using `accuracy_score`, `classification_report`, and `confusion_matrix`
"""

 
